apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
  name: pensive-keller-c0a001
spec:
  charts:
    - colors:
        - hex: '#00C9FF'
          id: base
          name: laser
          type: text
      decimalPlaces: 2
      height: 1
      kind: Single_Stat
      name: Total Bytes Received
      queries:
        - query: |-
            from(bucket: "default")
              |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
              |> filter(fn: (r) => r["_measurement"] == "net")
              |> filter(fn: (r) => r["_field"] == "bytes_recv")
              |> last()
              |> toFloat()
              |> map(fn: (r) => ({ r with _value: r._value / float(v: "1e9") }))
      staticLegend: {}
      suffix: ' GB'
      width: 2
    - axes:
        - base: "10"
          name: x
          scale: linear
        - base: "10"
          name: "y"
          scale: linear
          suffix: b/s
      colorizeRows: true
      colors:
        - hex: '#74D495'
          id: bFVQZYk6sryowPqyGij-g
          name: Atlantis
          type: scale
        - hex: '#3F3FBA'
          id: 2efPqtkdUgmjypxLepsX-
          name: Atlantis
          type: scale
        - hex: '#FF4D9E'
          id: 6escTZXQCH569ozWMuit9
          name: Atlantis
          type: scale
      geom: line
      height: 4
      hoverDimension: auto
      kind: Xy
      legendColorizeRows: true
      legendOpacity: 1
      legendOrientationThreshold: 1e+08
      name: Network Traffic
      opacity: 1
      orientationThreshold: 1e+08
      position: overlaid
      queries:
        - query: |-
            from(bucket: "default")
              |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
              |> filter(fn: (r) => r._measurement == "net")
              |> filter(fn: (r) => r.interface == "enp1s0")
              |> filter(fn: (r) => r._field == "bytes_sent")
              |> aggregateWindow(every: v.windowPeriod, fn: last)
              |> sort(columns: ["_time"], desc: false)
              |> derivative(unit: 1s, nonNegative: true, columns: ["_value"], timeColumn: "_time")
              |> map(fn: (r) => ({ r with _field: "Sent" }))
              |> map(fn: (r) => ({ r with _value: r._value * -8.0 }))
              |> drop(columns: ["_start", "_stop"])
        - query: |-
            from(bucket: "default")
                |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                |> filter(fn: (r) => r._measurement == "net")
                |> filter(fn: (r) => r._field == "bytes_recv")
                |> filter(fn: (r) => r.interface == "enp1s0")
                |> aggregateWindow(every: v.windowPeriod, fn: last)
                |> derivative(unit: 1s, nonNegative: true, columns: ["_value"], timeColumn: "_time")
                |> map(fn: (r) => ({ r with _field: "Received" }))
                |> map(fn: (r) => ({ r with _value: r._value * 8.0}))
                |> drop(columns: ["_start", "_stop"])
      staticLegend:
        colorizeRows: true
        opacity: 1
        orientationThreshold: 1e+08
        widthRatio: 1
      width: 4
      widthRatio: 1
      xCol: _time
      yCol: _value
      yPos: 1
    - colors:
        - hex: '#00C9FF'
          id: base
          name: laser
          type: text
      decimalPlaces: 2
      height: 1
      kind: Single_Stat
      name: Total Bytes Sent
      queries:
        - query: |-
            from(bucket: "default")
              |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
              |> filter(fn: (r) => r["_measurement"] == "net")
              |> filter(fn: (r) => r["_field"] == "bytes_sent")
              |> last()
              |> toFloat()
              |> map(fn: (r) => ({ r with _value: r._value / float(v: "1e9") }))
      staticLegend: {}
      suffix: ' GB'
      width: 2
      xPos: 2
    - colors:
        - hex: '#32B08C'
          id: base
          name: viridian
          type: text
      decimalPlaces: 0
      height: 1
      kind: Single_Stat
      name: Uptime
      queries:
        - query: |-
            from(bucket: "default")
              |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
              |> filter(fn: (r) => r["_measurement"] == "system")
              |> filter(fn: (r) => r["_field"] == "uptime")
              |> map(fn: (r) => ({ r with _value: string(v: duration(v: int(v: r._value) * 1000000000)) }))
      staticLegend: {}
      width: 2
      xPos: 4
    - axes:
        - base: "10"
          name: x
          scale: linear
        - base: "10"
          name: "y"
          scale: linear
          domain:
            - 0
            - 12000000000
      colorizeRows: true
      colors:
        - hex: '#31C0F6'
          id: wMw7u2nxtCXpNCRajfFb_
          name: Nineteen Eighty Four
          type: scale
        - hex: '#A500A5'
          id: CCbnQKAskFC7oVZ4jhi-D
          name: Nineteen Eighty Four
          type: scale
        - hex: '#FF7E27'
          id: 1d-QPK8bcz1G8o8DA17j5
          name: Nineteen Eighty Four
          type: scale
      geom: line
      height: 2
      hoverDimension: auto
      kind: Xy
      legendColorizeRows: true
      legendOpacity: 1
      legendOrientationThreshold: 1e+08
      name: Memory
      opacity: 1
      orientationThreshold: 1e+08
      position: overlaid
      queries:
        - query: |-
            from(bucket: "default")
              |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
              |> filter(fn: (r) => r["_measurement"] == "mem")
              |> filter(fn: (r) => r["_field"] == "used")
              |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
              |> yield(name: "mean")
      shade: true
      staticLegend:
        colorizeRows: true
        opacity: 1
        orientationThreshold: 1e+08
        widthRatio: 1
      width: 4
      widthRatio: 1
      xCol: _time
      xPos: 4
      yCol: _value
      yPos: 1
    - axes:
        - base: "10"
          name: x
          scale: linear
        - base: "10"
          name: "y"
          scale: linear
      colorizeRows: true
      colors:
        - hex: '#31C0F6'
          id: wMw7u2nxtCXpNCRajfFb_
          name: Nineteen Eighty Four
          type: scale
        - hex: '#A500A5'
          id: CCbnQKAskFC7oVZ4jhi-D
          name: Nineteen Eighty Four
          type: scale
        - hex: '#FF7E27'
          id: 1d-QPK8bcz1G8o8DA17j5
          name: Nineteen Eighty Four
          type: scale
      geom: line
      height: 2
      hoverDimension: auto
      kind: Xy
      legendColorizeRows: true
      legendOpacity: 1
      legendOrientationThreshold: 1e+08
      name: CPU Usage
      opacity: 1
      orientationThreshold: 1e+08
      position: stacked
      queries:
        - query: |-
            from(bucket: "default")
              |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
              |> filter(fn: (r) => r["_measurement"] == "cpu")
              |> filter(fn: (r) => r["_field"] == "usage_user" or r["_field"] == "usage_system")
              |> filter(fn: (r) => r["cpu"] == "cpu-total")
              |> filter(fn: (r) => r["host"] == "almachine")
              |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
              |> yield(name: "mean")
      shade: true
      staticLegend:
        colorizeRows: true
        opacity: 1
        orientationThreshold: 1e+08
        widthRatio: 1
      width: 4
      widthRatio: 1
      xCol: _time
      xPos: 4
      yCol: _value
      yPos: 3
    - colors:
        - hex: '#32B08C'
          id: base
          name: viridian
          type: text
      decimalPlaces: 0
      height: 1
      kind: Single_Stat
      name: System Load
      queries:
        - query: |-
            from(bucket: "default")
              |> range(start: 0, stop: now())
              |> filter(fn: (r) => r["_measurement"] == "system")
              |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
              |> last(column: "load1")
              |> map(fn: (r) => ({string: string(v: r.load1) + "   " + string(v: r.load5) + "   " + string(v: r.load15)}))
              |> yield(name: "last_values")
      staticLegend: {}
      width: 2
      xPos: 6
    - axes:
        - base: "10"
          name: x
          scale: linear
        - base: "10"
          name: "y"
          scale: linear
          suffix: B
      colorizeRows: true
      colors:
        - hex: '#74D495'
          id: bFVQZYk6sryowPqyGij-g
          name: Atlantis
          type: scale
        - hex: '#3F3FBA'
          id: 2efPqtkdUgmjypxLepsX-
          name: Atlantis
          type: scale
        - hex: '#FF4D9E'
          id: 6escTZXQCH569ozWMuit9
          name: Atlantis
          type: scale
      geom: monotoneX
      height: 2
      hoverDimension: auto
      kind: Xy
      legendColorizeRows: true
      legendOpacity: 1
      legendOrientationThreshold: 1e+08
      name: Disk IO
      opacity: 1
      orientationThreshold: 1e+08
      position: overlaid
      queries:
        - query: |-
            from(bucket: "default")
              |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
              |> filter(fn: (r) => r["_measurement"] == "diskio")
              |> filter(fn: (r) => r["_field"] == "read_bytes")
              |> filter(fn: (r) => r["name"] == "nvme0n1")
              |> derivative()
              |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
              |> yield(name: "mean")
        - query: |-
            from(bucket: "default")
              |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
              |> filter(fn: (r) => r["_measurement"] == "diskio")
              |> filter(fn: (r) => r["_field"] == "write_bytes")
              |> filter(fn: (r) => r["name"] == "nvme0n1")
              |> derivative()
              |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
              |> yield(name: "mean")
      shade: true
      staticLegend:
        colorizeRows: true
        opacity: 1
        orientationThreshold: 1e+08
        widthRatio: 1
      width: 4
      widthRatio: 1
      xCol: _time
      xPos: 8
      yCol: _value
    - axes:
        - base: "10"
          name: x
          scale: linear
        - base: "10"
          name: "y"
          scale: linear
          suffix: '%'
          domain:
            - 0
            - 100
      colorizeRows: true
      colors:
        - hex: '#31C0F6'
          id: QWT8yC9jU8945xkErgXK6
          name: Nineteen Eighty Four
          type: scale
        - hex: '#A500A5'
          id: UwE4O1GEffYS8NOrZh_dL
          name: Nineteen Eighty Four
          type: scale
        - hex: '#FF7E27'
          id: ug3ZJ06I2S_homrDx2eQY
          name: Nineteen Eighty Four
          type: scale
      geom: line
      height: 3
      hoverDimension: auto
      kind: Xy
      legendColorizeRows: true
      legendOpacity: 1
      legendOrientationThreshold: 1e+08
      name: Disk Usage
      opacity: 1
      orientationThreshold: 1e+08
      position: overlaid
      queries:
        - query: |-
            from(bucket: "default")
              |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
              |> filter(fn: (r) => r["_measurement"] == "disk")
              |> filter(fn: (r) => r["_field"] == "used_percent")
              |> filter(fn: (r) => r["path"] == "/var" or r["path"] == "/" or r["path"] == "/data")
              |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
              |> yield(name: "mean")
      shade: true
      staticLegend:
        colorizeRows: true
        opacity: 1
        orientationThreshold: 1e+08
        widthRatio: 1
      width: 4
      widthRatio: 1
      xCol: _time
      xPos: 8
      yCol: _value
      yPos: 2
  name: Overview