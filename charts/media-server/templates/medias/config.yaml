apiVersion: v1
kind: ConfigMap
metadata:
  name: media-manager-config
  namespace: {{ .Values.namespace }}
data:
  config.toml: |

      [misc]
      # it's very likely that you need to change this for MediaManager to work
      frontend_url = "https://media-manager.tail0984c.ts.net/web/"   # note the trailing slash
      cors_urls = ["https://media-manager.tail0984c.ts.net"]   # note the lack of a trailing slash

      tv_directory = "/data/tvshows"
      movie_directory = "/data/movies"
      torrent_directory = "/data/torrents"   # this is where MediaManager will search for the downloaded torrents and usenet files

        # you probaly don't need to change this
      development = false

      [database]
      host = "postgres.{{ .Values.namespace }}.svc.cluster.local"
      port = 5432

      [auth]
      email_password_resets = false   # if true, you also need to set up SMTP (notifications.smtp_config)

      #token_secret = ""   # generate a random string with "openssl rand -hex 32", e.g. here https://www.cryptool.org/en/cto/openssl/
      session_lifetime = 86400    # this is how long you will be logged in after loggin in, in seconds

        # Admin users: Users who register with these email addresses will automatically become administrators
        # If no users exist in the database, a default admin user will be created with the first email in this list
      admin_emails = ["admin@example.com", "admin2@example.com"]

      # OpenID Connect settings
      [auth.openid_connect]
      enabled = false

      [notifications]
      # SMTP settings for email notifications and email password resets
      [notifications.smtp_config]
      smtp_host = "smtp.example.com"
      smtp_port = 587
      smtp_user = "admin"
      smtp_password = "admin"
      from_email = "mediamanager@example.com"
      use_tls = true

      # Email notification settings
      [notifications.email_notifications]
      enabled = false
      emails = ["admin@example.com", "admin2@example.com"]    # List of email addresses to send notifications to

      # Gotify notification settings
      [notifications.gotify]
      enabled = false
      api_key = ""
      url = "https://gotify.example.com"

      # Ntfy notification settings
      [notifications.ntfy]
      enabled = false
      url = "https://ntfy.sh/your-topic"

      # Pushover notification settings
      [notifications.pushover]
      enabled = false
      api_key = ""
      user = ""

      [torrents]
      # qBittorrent settings
      [torrents.qbittorrent]
      enabled = true
      host = "qbittorrent.{{ .Values.namespace }}.svc.cluster.local"
      port = {{ .Values.qbittorrent.webUiPort }}
      username = "admin"
      password = "admin"

      # Transmission settings
      [torrents.transmission]
      enabled = false
      username = "admin"
      password = "admin"
      https_enabled = true
      host = "localhost"
      port = 9091
      path = "/transmission/rpc"   # RPC request path target, usually "/transmission/rpc"

      # SABnzbd settings
      [torrents.sabnzbd]
      enabled = false
      host = "http://localhost"
      port = 8080
      api_key = ""
      base_path = "/api"

      [indexers]
      # Prowlarr settings
      [indexers.prowlarr]
      enabled = false
      url = "http://localhost:9696"
      api_key = ""

      # Jackett settings
      [indexers.jackett]
      enabled = false
      url = "http://localhost:9117"
      api_key = ""
      indexers = ["1337x", "torrentleech"]    # List of indexer names to use

      # Title-based scoring rules
      [[indexers.title_scoring_rules]]
      name = "prefer_h265"
      keywords = ["h265", "hevc", "x265", "h.265", "x.265"]
      score_modifier = 100
      negate = false

      [[indexers.title_scoring_rules]]
      name = "avoid_cam"
      keywords = ["cam", "ts"]
      score_modifier = -10000
      negate = false

      # Indexer flag-based scoring rules
      [[indexers.indexer_flag_scoring_rules]]
      name = "reject_non_freeleech"
      flags = ["freeleech", "freeleech75"]
      score_modifier = -10000
      negate = true

      [[indexers.indexer_flag_scoring_rules]]
      name = "reject_nuked"
      flags = ["nuked"]
      score_modifier = -10000
      negate = false

      # Scoring rulesets
      [[indexers.scoring_rule_sets]]
      name = "default"
      libraries = ["ALL_TV", "ALL_MOVIES"]
      rule_names = ["prefer_h265", "avoid_cam", "reject_nuked"]

      [[indexers.scoring_rule_sets]]
      name = "strict_quality"
      libraries = ["ALL_MOVIES"]
      rule_names = ["prefer_h265", "avoid_cam", "reject_non_freeleech"]

      # its very unlikely that you need to change this
      [metadata]
      [metadata.tmdb]
      tmdb_relay_url = "https://metadata-relay.maxid.me/tmdb"

      [metadata.tvdb]
      tvdb_relay_url = "https://metadata-relay.maxid.me/tvdb"